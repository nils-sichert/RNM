0, 0, 0
30, 0, 0
60, 20, 20
120, 80, 0
150, 100, 50
90, 90, 30
120, 10, 30
120, -10, 30
150, -90, 40


0, 0, 0
30, 0, 0
90, 0, 0

Single joint test
0
30
90
100
80
20
0
[0, max_vel, max_vel, 0, -max_vel, -max_vel, 0]

2 joints, close stress test
0,   0
5,   15
50,  60
100, 90
95,  85
90,  40
0,   0
[0, max_vel, max_vel, 0, -max_vel, -max_vel, 0]

 0,   0
40,  10
20,  20
10,  40
20,   0
15, -40
[0, max_vel, -max_vel, max_vel, -max_vel, 0]

0 , 0 , 0 ,  -5 , 0 , 0 , 0 
20, 20, 20, -20, 20, 20, 20
80, 60, 80, -80, 80, 80, 80
90, 90, 90, -90, 90, 90, 90
80, 60, 80, -80, 80, 80, 80
20, 20, 20, -20, 20, 20, 20
0 , 0 , 0 ,  -5 , 0 , 0 , 0 

Test: 0, 30
1.0  * max_val  => [0, 0.0031415926535897933, 0.145,  0.14814159265358978,   0.3148058655673921]
0.9  * max_val  => [0, 0.0031415926535897933, 0.1305, 0.1336415926535898,    0.3343042065941252]
0.8  * max_val  => [0, 0.0031415926535897933, 0.116,  0.1191415926535898,    0.36048963287754143]
0.7  * max_val  => [0, 0.0031415926535897933, 0.1015, 0.10464159265358979,   0.3962280380990767]
0.6  * max_val  => [0, 0.0031415926535897933, 0.087,  0.09014159265358979,   0.44629591172779026]
0.5  * max_val  => [0, 0.0031415926535897933, 0.0725, 0.07564159265358979,   0.5192909348079894]
0.4  * max_val  => [0, 0.0031415926535897933, 0.058,  0.06114159265358979,   0.632408469428288]
0.3  * max_val  => [0, 0.0031415926535897933, 0.0435, 0.04664159265358978,   0.8257710271287857]
0.2  * max_val  => [0, 0.0031415926535897933, 0.029,  0.03214159265358979,   1.2197461425297809]
0.1  * max_val  => [0, 0.0031415926535897933, 0.0145, 0.017641592653589794,  2.416171488732767]
0.01 * max_val  => [0, 0.0031415926535897933, 0.0014, 0.004591592653589793, 24.075802720386513]

0.25 * max_val  => [0, 0.0031415926535897933, 0.0363, 0.03939159265358978, 0.9826360732891838]
0.125 * max_val => [0, 0.0031415926535897933, 0.0181, 0.02126659265358979, 1.9365138502515726]
0.5 * max_acc   => [0, 0.0015707963267948967, 0.29,   0.2915707963267949,  0.3865204674039947]
0.5 * max_jrk   => [0, 0.006283185307179587,  0.145,  0.15128318530717957, 0.316376661894187]
0.5 * all       => [0, 0.0031415926535897933, 0.145,  0.14814159265358978, 0.5555409348079893]




Archive:

Old case standardization mirroring:
# Normal case
if wp_increase and v_increase:
    wp1 = og_wp1
    wp2 = og_wp2
    v1  = og_v1
    v2  = og_v2
# Swap velocities, so we always have a rising velocity for calculations
if wp_increase and not v_increase:
    wp1 = og_wp1
    wp2 = og_wp2
    v1  = og_v2
    v2  = og_v1
# Swap waypoints, so we always have rising position for calculation
if not wp_increase and v_increase:
    wp1 = og_wp2
    wp2 = og_wp1
    v1  = - og_v1
    v2  = - og_v2
# Swap waypoints and velocities
if not wp_increase and not v_increase:
    wp1 = og_wp2
    wp2 = og_wp1
    v1  = - og_v2
    v2  = - og_v1