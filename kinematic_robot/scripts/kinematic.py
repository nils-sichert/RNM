
#!/usr/bin/env python3
import numpy as np
from sympy import sin, cos
from rospy import Subscriber

class kinematic:
    def __init__(self):
        pass
        # create initial pose
        #/TODO Subscriber aktuelle POSE
        # self.theta_init = np.array([0,0,0,0,0,0,0])#np.array(WINKEL)
        # self.A_init = self.get_A(self.theta_init)#np.array(MATRIX A)

    def direct_kinematic(self, theta):
        A_Mat = self.get_A(theta)
        # position = A_Mat[9:12]
        # orientation = np.reshape(A_Mat[0:9], (3,3))

        return A_Mat #,position, orientation
    
    def inverse_kinematic(self, theta, A_current, A_target, step=0.01, err_Tol=1e-3):
        # input: q = current thetas, ... /TODO
        delta_A = (A_target-A_current)
        while np.abs(delta_A).max() > err_Tol:
            J_theta = self.get_J(theta)
            
            # multiplying by step_size to interpolate between current and target pose
            
            delta_theta = np.matmul(np.linalg.pinv(J_theta), delta_A*step)
            theta = theta + delta_theta
            
            A_current = self.get_A(theta)
            delta_A = (A_target - A_current)
        return theta

    def get_A(self, theta):
        # current_trigo: sin and cos of actual theta's
        sin1, sin2, sin3, sin4, sin5, sin6, sin7 = sin(theta[0]), sin(theta[1]), sin(theta[2]), sin(theta[3]), sin(theta[4]), sin(theta[5]), sin(theta[6])
        cos1, cos2, cos3, cos4, cos5, cos6, cos7 = cos(theta[0]), cos(theta[1]), cos(theta[2]), cos(theta[3]), cos(theta[4]), cos(theta[5]), cos(theta[6])
        
         
        A = np.array([((((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*cos2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*sin2)*cos1 - (((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3)*sin1, 
        ((((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*cos2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*sin2)*sin1 + (((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3)*cos1, 
        -(((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*sin2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*cos2, 
        ((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*cos1 - (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 - (sin5*sin7*cos6 + cos5*cos7)*cos3)*sin1, 
        ((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*sin1 + (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 - (sin5*sin7*cos6 + cos5*cos7)*cos3)*cos1, 
        -(((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*sin2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*cos2, 
        (((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*cos2 + (sin4*sin6*cos5 - cos4*cos6)*sin2)*cos1 - ((sin4*cos6 + sin6*cos4*cos5)*sin3 + sin5*sin6*cos3)*sin1, 
        (((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*cos2 + (sin4*sin6*cos5 - cos4*cos6)*sin2)*sin1 + ((sin4*cos6 + sin6*cos4*cos5)*sin3 + sin5*sin6*cos3)*cos1, 
        -((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*sin2 + (sin4*sin6*cos5 - cos4*cos6)*cos2, 
        ((-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*cos2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*sin2)*cos1 - ((0.107*sin6 + 0.088*cos6)*sin5*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 + 0.0825*sin3)*sin1, 
        ((-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*cos2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*sin2)*sin1 + ((0.107*sin6 + 0.088*cos6)*sin5*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 + 0.0825*sin3)*cos1, 
        -(-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*sin2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*cos2 + 0.333], dtype='float')
    
        return A

    def get_J(self,theta):
        # current_trigo: sin and cos of actual theta's
        sin1, sin2, sin3, sin4, sin5, sin6, sin7 = sin(theta[0]), sin(theta[1]), sin(theta[2]), sin(theta[3]), sin(theta[4]), sin(theta[5]), sin(theta[6])
        cos1, cos2, cos3, cos4, cos5, cos6, cos7 = cos(theta[0]), cos(theta[1]), cos(theta[2]), cos(theta[3]), cos(theta[4]), cos(theta[5]), cos(theta[6])
        
        J =np.array([[-((((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*cos2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*sin2)*sin1 + (-((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3)*cos1, (-(((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*sin2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*cos2)*cos1, (-((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3)*cos1*cos2 + (-((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (sin5*cos6*cos7 - sin7*cos5)*sin3)*sin1, -(-(sin5*sin7 + cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*sin1*sin3 + ((-(sin5*sin7 + cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*cos2*cos3 + ((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin2)*cos1, (((-sin5*sin7 - cos5*cos6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3*cos4)*cos2 + (-sin5*cos6*cos7 + sin7*cos5)*sin2*sin4)*cos1 + (-(sin5*sin7 + cos5*cos6*cos7)*cos3 - (-sin5*cos6*cos7 + sin7*cos5)*sin3*cos4)*sin1, (((-sin4*cos6*cos7 - sin6*cos4*cos5*cos7)*cos3 + sin3*sin5*sin6*cos7)*cos2 + (-sin4*sin6*cos5*cos7 + cos4*cos6*cos7)*sin2)*cos1 + (-(-sin4*cos6*cos7 - sin6*cos4*cos5*cos7)*sin3 + sin5*sin6*cos3*cos7)*sin1, ((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*cos1 + (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 - (-sin5*sin7*cos6 - cos5*cos7)*cos3)*sin1], 
        [((((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*cos2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*sin2)*cos1 - (((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3)*sin1, (-(((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3)*sin2 + ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*cos2)*sin1, (-((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3)*sin1*cos2 + (((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 - (sin5*cos6*cos7 - sin7*cos5)*sin3)*cos1, (-(sin5*sin7 + cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*sin3*cos1 + ((-(sin5*sin7 + cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*cos2*cos3 + ((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin2)*sin1, (((-sin5*sin7 - cos5*cos6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3*cos4)*cos2 + (-sin5*cos6*cos7 + sin7*cos5)*sin2*sin4)*sin1 + ((sin5*sin7 + cos5*cos6*cos7)*cos3 + (-sin5*cos6*cos7 + sin7*cos5)*sin3*cos4)*cos1, (((-sin4*cos6*cos7 - sin6*cos4*cos5*cos7)*cos3 + sin3*sin5*sin6*cos7)*cos2 + (-sin4*sin6*cos5*cos7 + cos4*cos6*cos7)*sin2)*sin1 + ((-sin4*cos6*cos7 - sin6*cos4*cos5*cos7)*sin3 - sin5*sin6*cos3*cos7)*cos1, ((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*sin1 + (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 + (-sin5*sin7*cos6 - cos5*cos7)*cos3)*cos1], 
        [0, (-((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos3 - (-sin5*cos6*cos7 + sin7*cos5)*sin3)*cos2 - ((sin5*sin7 + cos5*cos6*cos7)*sin4 + sin6*cos4*cos7)*sin2, (((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3)*sin2, -(-(sin5*sin7 + cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*sin2*cos3 + ((sin5*sin7 + cos5*cos6*cos7)*cos4 - sin4*sin6*cos7)*cos2, (-(-sin5*sin7 - cos5*cos6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3*cos4)*sin2 + (-sin5*cos6*cos7 + sin7*cos5)*sin4*cos2, (-(-sin4*cos6*cos7 - sin6*cos4*cos5*cos7)*cos3 - sin3*sin5*sin6*cos7)*sin2 + (-sin4*sin6*cos5*cos7 + cos4*cos6*cos7)*cos2, (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 - (sin5*sin7*cos6 + cos5*cos7)*sin3)*sin2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*cos2], 
        [-((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*sin1 + (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 + (sin5*sin7*cos6 + cos5*cos7)*cos3)*cos1, (-(((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*sin2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*cos2)*cos1, (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 + (sin5*sin7*cos6 + cos5*cos7)*cos3)*cos1*cos2 + (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (-sin5*sin7*cos6 - cos5*cos7)*sin3)*sin1, -(-(sin5*cos7 - sin7*cos5*cos6)*sin4 + sin6*sin7*cos4)*sin1*sin3 + ((-(sin5*cos7 - sin7*cos5*cos6)*sin4 + sin6*sin7*cos4)*cos2*cos3 + ((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin2)*cos1, (((-sin5*cos7 + sin7*cos5*cos6)*sin3 + (sin5*sin7*cos6 + cos5*cos7)*cos3*cos4)*cos2 + (sin5*sin7*cos6 + cos5*cos7)*sin2*sin4)*cos1 + (-(sin5*cos7 - sin7*cos5*cos6)*cos3 - (sin5*sin7*cos6 + cos5*cos7)*sin3*cos4)*sin1, (((sin4*sin7*cos6 + sin6*sin7*cos4*cos5)*cos3 - sin3*sin5*sin6*sin7)*cos2 + (sin4*sin6*sin7*cos5 - sin7*cos4*cos6)*sin2)*cos1 + (-(sin4*sin7*cos6 + sin6*sin7*cos4*cos5)*sin3 - sin5*sin6*sin7*cos3)*sin1, ((((-sin5*sin7 - cos5*cos6*cos7)*cos4 + sin4*sin6*cos7)*cos3 + (sin5*cos6*cos7 - sin7*cos5)*sin3)*cos2 + ((-sin5*sin7 - cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*sin2)*cos1 + (-((-sin5*sin7 - cos5*cos6*cos7)*cos4 + sin4*sin6*cos7)*sin3 - (-sin5*cos6*cos7 + sin7*cos5)*cos3)*sin1], 
        [((((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2)*cos1 - (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 - (sin5*sin7*cos6 + cos5*cos7)*cos3)*sin1, (-(((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3)*sin2 + ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*cos2)*sin1, (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 + (sin5*sin7*cos6 + cos5*cos7)*cos3)*sin1*cos2 + (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 - (-sin5*sin7*cos6 - cos5*cos7)*sin3)*cos1, (-(sin5*cos7 - sin7*cos5*cos6)*sin4 + sin6*sin7*cos4)*sin3*cos1 + ((-(sin5*cos7 - sin7*cos5*cos6)*sin4 + sin6*sin7*cos4)*cos2*cos3 + ((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin2)*sin1, (((-sin5*cos7 + sin7*cos5*cos6)*sin3 + (sin5*sin7*cos6 + cos5*cos7)*cos3*cos4)*cos2 + (sin5*sin7*cos6 + cos5*cos7)*sin2*sin4)*sin1 + ((sin5*cos7 - sin7*cos5*cos6)*cos3 + (sin5*sin7*cos6 + cos5*cos7)*sin3*cos4)*cos1, (((sin4*sin7*cos6 + sin6*sin7*cos4*cos5)*cos3 - sin3*sin5*sin6*sin7)*cos2 + (sin4*sin6*sin7*cos5 - sin7*cos4*cos6)*sin2)*sin1 + ((sin4*sin7*cos6 + sin6*sin7*cos4*cos5)*sin3 + sin5*sin6*sin7*cos3)*cos1, ((((-sin5*sin7 - cos5*cos6*cos7)*cos4 + sin4*sin6*cos7)*cos3 + (sin5*cos6*cos7 - sin7*cos5)*sin3)*cos2 + ((-sin5*sin7 - cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*sin2)*sin1 + (((-sin5*sin7 - cos5*cos6*cos7)*cos4 + sin4*sin6*cos7)*sin3 + (-sin5*cos6*cos7 + sin7*cos5)*cos3)*cos1], 
        [0, (-((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos3 - (sin5*sin7*cos6 + cos5*cos7)*sin3)*cos2 - ((sin5*cos7 - sin7*cos5*cos6)*sin4 - sin6*sin7*cos4)*sin2, (((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*sin3 - (sin5*sin7*cos6 + cos5*cos7)*cos3)*sin2, -(-(sin5*cos7 - sin7*cos5*cos6)*sin4 + sin6*sin7*cos4)*sin2*cos3 + ((sin5*cos7 - sin7*cos5*cos6)*cos4 + sin4*sin6*sin7)*cos2, (-(-sin5*cos7 + sin7*cos5*cos6)*sin3 - (sin5*sin7*cos6 + cos5*cos7)*cos3*cos4)*sin2 + (sin5*sin7*cos6 + cos5*cos7)*sin4*cos2, (-(sin4*sin7*cos6 + sin6*sin7*cos4*cos5)*cos3 + sin3*sin5*sin6*sin7)*sin2 + (sin4*sin6*sin7*cos5 - sin7*cos4*cos6)*cos2, (-((-sin5*sin7 - cos5*cos6*cos7)*cos4 + sin4*sin6*cos7)*cos3 - (sin5*cos6*cos7 - sin7*cos5)*sin3)*sin2 + ((-sin5*sin7 - cos5*cos6*cos7)*sin4 - sin6*cos4*cos7)*cos2], 
        [-(((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*cos2 + (sin4*sin6*cos5 - cos4*cos6)*sin2)*sin1 + (-(sin4*cos6 + sin6*cos4*cos5)*sin3 - sin5*sin6*cos3)*cos1, (-((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*sin2 + (sin4*sin6*cos5 - cos4*cos6)*cos2)*cos1, (-(sin4*cos6 + sin6*cos4*cos5)*sin3 - sin5*sin6*cos3)*cos1*cos2 + (-(sin4*cos6 + sin6*cos4*cos5)*cos3 + sin3*sin5*sin6)*sin1, ((sin4*cos6 + sin6*cos4*cos5)*sin2 + (-sin4*sin6*cos5 + cos4*cos6)*cos2*cos3)*cos1 - (-sin4*sin6*cos5 + cos4*cos6)*sin1*sin3, ((-sin3*sin6*cos5 - sin5*sin6*cos3*cos4)*cos2 - sin2*sin4*sin5*sin6)*cos1 + (sin3*sin5*sin6*cos4 - sin6*cos3*cos5)*sin1, (((-sin4*sin6 + cos4*cos5*cos6)*cos3 - sin3*sin5*cos6)*cos2 + (sin4*cos5*cos6 + sin6*cos4)*sin2)*cos1 + (-(-sin4*sin6 + cos4*cos5*cos6)*sin3 - sin5*cos3*cos6)*sin1, 0], 
        [(((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*cos2 + (sin4*sin6*cos5 - cos4*cos6)*sin2)*cos1 - ((sin4*cos6 + sin6*cos4*cos5)*sin3 + sin5*sin6*cos3)*sin1, (-((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*sin2 + (sin4*sin6*cos5 - cos4*cos6)*cos2)*sin1, (-(sin4*cos6 + sin6*cos4*cos5)*sin3 - sin5*sin6*cos3)*sin1*cos2 + ((sin4*cos6 + sin6*cos4*cos5)*cos3 - sin3*sin5*sin6)*cos1, ((sin4*cos6 + sin6*cos4*cos5)*sin2 + (-sin4*sin6*cos5 + cos4*cos6)*cos2*cos3)*sin1 + (-sin4*sin6*cos5 + cos4*cos6)*sin3*cos1, ((-sin3*sin6*cos5 - sin5*sin6*cos3*cos4)*cos2 - sin2*sin4*sin5*sin6)*sin1 + (-sin3*sin5*sin6*cos4 + sin6*cos3*cos5)*cos1, (((-sin4*sin6 + cos4*cos5*cos6)*cos3 - sin3*sin5*cos6)*cos2 + (sin4*cos5*cos6 + sin6*cos4)*sin2)*sin1 + ((-sin4*sin6 + cos4*cos5*cos6)*sin3 + sin5*cos3*cos6)*cos1, 0], 
        [0, (-(sin4*cos6 + sin6*cos4*cos5)*cos3 + sin3*sin5*sin6)*cos2 - (sin4*sin6*cos5 - cos4*cos6)*sin2, ((sin4*cos6 + sin6*cos4*cos5)*sin3 + sin5*sin6*cos3)*sin2, (sin4*cos6 + sin6*cos4*cos5)*cos2 - (-sin4*sin6*cos5 + cos4*cos6)*sin2*cos3, (sin3*sin6*cos5 + sin5*sin6*cos3*cos4)*sin2 - sin4*sin5*sin6*cos2, (-(-sin4*sin6 + cos4*cos5*cos6)*cos3 + sin3*sin5*cos6)*sin2 + (sin4*cos5*cos6 + sin6*cos4)*cos2, 0], 
        [-((-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*cos2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*sin2)*sin1 + (-(0.107*sin6 + 0.088*cos6)*sin5*cos3 - ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 - 0.0825*sin3)*cos1, (-(-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*sin2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*cos2)*cos1, ((-0.107*sin6 - 0.088*cos6)*sin5*cos3 - ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 - 0.0825*sin3)*cos1*cos2 + ((0.107*sin6 + 0.088*cos6)*sin3*sin5 - ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 - 0.0825*cos3)*sin1, ((-(0.107*sin6 + 0.088*cos6)*sin4*cos5 + (-0.088*sin6 + 0.107*cos6 - 0.384)*cos4 + 0.0825*sin4)*cos2*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin2)*cos1 - (-(0.107*sin6 + 0.088*cos6)*sin4*cos5 + (-0.088*sin6 + 0.107*cos6 - 0.384)*cos4 + 0.0825*sin4)*sin1*sin3, (((-0.107*sin6 - 0.088*cos6)*sin3*cos5 - (0.107*sin6 + 0.088*cos6)*sin5*cos3*cos4)*cos2 - (0.107*sin6 + 0.088*cos6)*sin2*sin4*sin5)*cos1 + ((0.107*sin6 + 0.088*cos6)*sin3*sin5*cos4 - (0.107*sin6 + 0.088*cos6)*cos3*cos5)*sin1, ((((-0.107*sin6 - 0.088*cos6)*sin4 + (-0.088*sin6 + 0.107*cos6)*cos4*cos5)*cos3 + (0.088*sin6 - 0.107*cos6)*sin3*sin5)*cos2 + ((-0.088*sin6 + 0.107*cos6)*sin4*cos5 + (0.107*sin6 + 0.088*cos6)*cos4)*sin2)*cos1 + (-((-0.107*sin6 - 0.088*cos6)*sin4 + (-0.088*sin6 + 0.107*cos6)*cos4*cos5)*sin3 - (-0.088*sin6 + 0.107*cos6)*sin5*cos3)*sin1, 0], 
        [((-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*cos2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*sin2)*cos1 - ((0.107*sin6 + 0.088*cos6)*sin5*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 + 0.0825*sin3)*sin1, (-(-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*sin2 + ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*cos2)*sin1, ((-0.107*sin6 - 0.088*cos6)*sin5*cos3 - ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 - 0.0825*sin3)*sin1*cos2 + (-(0.107*sin6 + 0.088*cos6)*sin3*sin5 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 + 0.0825*cos3)*cos1, ((-(0.107*sin6 + 0.088*cos6)*sin4*cos5 + (-0.088*sin6 + 0.107*cos6 - 0.384)*cos4 + 0.0825*sin4)*cos2*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin2)*sin1 + (-(0.107*sin6 + 0.088*cos6)*sin4*cos5 + (-0.088*sin6 + 0.107*cos6 - 0.384)*cos4 + 0.0825*sin4)*sin3*cos1, (((-0.107*sin6 - 0.088*cos6)*sin3*cos5 - (0.107*sin6 + 0.088*cos6)*sin5*cos3*cos4)*cos2 - (0.107*sin6 + 0.088*cos6)*sin2*sin4*sin5)*sin1 + (-(0.107*sin6 + 0.088*cos6)*sin3*sin5*cos4 + (0.107*sin6 + 0.088*cos6)*cos3*cos5)*cos1, ((((-0.107*sin6 - 0.088*cos6)*sin4 + (-0.088*sin6 + 0.107*cos6)*cos4*cos5)*cos3 + (0.088*sin6 - 0.107*cos6)*sin3*sin5)*cos2 + ((-0.088*sin6 + 0.107*cos6)*sin4*cos5 + (0.107*sin6 + 0.088*cos6)*cos4)*sin2)*sin1 + (((-0.107*sin6 - 0.088*cos6)*sin4 + (-0.088*sin6 + 0.107*cos6)*cos4*cos5)*sin3 + (-0.088*sin6 + 0.107*cos6)*sin5*cos3)*cos1, 0], 
        [0, ((0.107*sin6 + 0.088*cos6)*sin3*sin5 - ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos3 - 0.0825*cos3)*cos2 - ((0.107*sin6 + 0.088*cos6)*sin4*cos5 + (0.088*sin6 - 0.107*cos6 + 0.384)*cos4 - 0.0825*sin4 + 0.316)*sin2, (-(-0.107*sin6 - 0.088*cos6)*sin5*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*sin3 + 0.0825*sin3)*sin2, -(-(0.107*sin6 + 0.088*cos6)*sin4*cos5 + (-0.088*sin6 + 0.107*cos6 - 0.384)*cos4 + 0.0825*sin4)*sin2*cos3 + ((0.107*sin6 + 0.088*cos6)*cos4*cos5 - (0.088*sin6 - 0.107*cos6 + 0.384)*sin4 - 0.0825*cos4)*cos2, (-(-0.107*sin6 - 0.088*cos6)*sin3*cos5 + (0.107*sin6 + 0.088*cos6)*sin5*cos3*cos4)*sin2 - (0.107*sin6 + 0.088*cos6)*sin4*sin5*cos2, (-((-0.107*sin6 - 0.088*cos6)*sin4 + (-0.088*sin6 + 0.107*cos6)*cos4*cos5)*cos3 - (0.088*sin6 - 0.107*cos6)*sin3*sin5)*sin2 + ((-0.088*sin6 + 0.107*cos6)*sin4*cos5 + (0.107*sin6 + 0.088*cos6)*cos4)*cos2, 0]], dtype='float')
        
        return J

# for testing an debugging

if __name__ == '__main__':
    kinemati = kinematic()
    theta_init = np.array([0,0,0,0,0,0,0])
    a = kinemati.direct_kinematic(theta_init)
    A_current = a
    theta_target = np.array([np.deg2rad(5), np.deg2rad(5), np.deg2rad(5), np.deg2rad(5), np.deg2rad(5), np.deg2rad(5),np.deg2rad(5)])
    a_target = kinemati.direct_kinematic(theta_target)
    A_target = a_target
    print(A_target)
    q_ik = kinemati.inverse_kinematic(theta_target, A_current, A_target)
    print(q_ik)